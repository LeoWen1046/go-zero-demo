// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package server

import (
	"context"

	"example/app/school/cmd/rpc/user/github.com/example/user"
	"example/app/school/cmd/rpc/user/internal/logic/userroleservice"
	"example/app/school/cmd/rpc/user/internal/svc"
)

type UserRoleServiceServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserRoleServiceServer
}

func NewUserRoleServiceServer(svcCtx *svc.ServiceContext) *UserRoleServiceServer {
	return &UserRoleServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *UserRoleServiceServer) UserRoleList(ctx context.Context, in *user.UserRoleListReq) (*user.UserRoleListResp, error) {
	l := userroleservicelogic.NewUserRoleListLogic(ctx, s.svcCtx)
	return l.UserRoleList(in)
}

func (s *UserRoleServiceServer) UserRoleUpdate(ctx context.Context, in *user.UserRoleUpdateReq) (*user.UserRoleUpdateResp, error) {
	l := userroleservicelogic.NewUserRoleUpdateLogic(ctx, s.svcCtx)
	return l.UserRoleUpdate(in)
}

func (s *UserRoleServiceServer) UserRoleInfo(ctx context.Context, in *user.UserRoleInfoReq) (*user.UserRoleInfoResp, error) {
	l := userroleservicelogic.NewUserRoleInfoLogic(ctx, s.svcCtx)
	return l.UserRoleInfo(in)
}

func (s *UserRoleServiceServer) UserRoleAdd(ctx context.Context, in *user.UserRoleAddReq) (*user.UserRoleAddResp, error) {
	l := userroleservicelogic.NewUserRoleAddLogic(ctx, s.svcCtx)
	return l.UserRoleAdd(in)
}

func (s *UserRoleServiceServer) UserRoleDelete(ctx context.Context, in *user.UserRoleDeleteReq) (*user.UserRoleDeleteResp, error) {
	l := userroleservicelogic.NewUserRoleDeleteLogic(ctx, s.svcCtx)
	return l.UserRoleDelete(in)
}
