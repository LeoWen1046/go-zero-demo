// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userservice

import (
	"context"

	"example/app/school/cmd/rpc/user/github.com/example/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LoginReq            = user.LoginReq
	LoginResp           = user.LoginResp
	User                = user.User
	UserClass           = user.UserClass
	UserClassAddReq     = user.UserClassAddReq
	UserClassAddResp    = user.UserClassAddResp
	UserClassDeleteReq  = user.UserClassDeleteReq
	UserClassDeleteResp = user.UserClassDeleteResp
	UserClassInfoReq    = user.UserClassInfoReq
	UserClassInfoResp   = user.UserClassInfoResp
	UserClassListReq    = user.UserClassListReq
	UserClassListResp   = user.UserClassListResp
	UserClassUpdateReq  = user.UserClassUpdateReq
	UserClassUpdateResp = user.UserClassUpdateResp
	UserInfoReq         = user.UserInfoReq
	UserInfoResp        = user.UserInfoResp
	UserInfoUpdateReq   = user.UserInfoUpdateReq
	UserInfoUpdateResp  = user.UserInfoUpdateResp
	UserListReq         = user.UserListReq
	UserListResp        = user.UserListResp
	UserRole            = user.UserRole
	UserRoleAddReq      = user.UserRoleAddReq
	UserRoleAddResp     = user.UserRoleAddResp
	UserRoleDeleteReq   = user.UserRoleDeleteReq
	UserRoleDeleteResp  = user.UserRoleDeleteResp
	UserRoleInfoReq     = user.UserRoleInfoReq
	UserRoleInfoResp    = user.UserRoleInfoResp
	UserRoleListReq     = user.UserRoleListReq
	UserRoleListResp    = user.UserRoleListResp
	UserRoleUpdateReq   = user.UserRoleUpdateReq
	UserRoleUpdateResp  = user.UserRoleUpdateResp

	UserService interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error)
		UserInfoUpdate(ctx context.Context, in *UserInfoUpdateReq, opts ...grpc.CallOption) (*UserInfoUpdateResp, error)
		UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserService) UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}

func (m *defaultUserService) UserInfoUpdate(ctx context.Context, in *UserInfoUpdateReq, opts ...grpc.CallOption) (*UserInfoUpdateResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UserInfoUpdate(ctx, in, opts...)
}

func (m *defaultUserService) UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UserList(ctx, in, opts...)
}
